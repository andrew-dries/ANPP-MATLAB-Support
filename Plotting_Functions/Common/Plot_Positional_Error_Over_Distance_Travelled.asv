function dist_err = Plot_Positional_Error_Over_Distance_Travelled(log_data)
%This function provides a standard method of calculating and displaying
%error over distance travelled.  This utilizes the raw GNSS packet to
%provide a source of truth for comparison, as well as the state packet to
%provide a self position estimate.  Useful for analyzing free inertial
%performance.

    %*********************************************************************%
    %Initializations
    %*********************************************************************%

    %Initialize output
    dist_err    = [];

    %Grab structs in log file
    fields      = fieldnames(log_data);

    %Make sure state struct exists
    if(isempty( find( contains(fields, "state") == 1) ) )
        error("State struct does not exist in log_data");
    elseif(isempty( find( contains(fields, "raw_gnss") == 1) ) )
        error("Raw GNSS struct does not exist in log_data");
    end

    %*********************************************************************%
    %Plot Error over Distance Travelled
    %*********************************************************************%
    dist_err                = figure('Name',"Error Over Distance Travelled");
    subplot(3,1,1)
    
    %Capture positional error
    [pos_error, time]       = distance_between_lat_lon_vectors(log_data.state.position(:,1:2), log_data.state.duration_seconds, log_data.raw_gnss.position(:,1:2), log_data.raw_gnss.duration_seconds);
    
    %Make input vectors
    times                   = [];
    times.time1             = time;
    
    input_vectors           = [];
    input_vectors.inp1      = pos_error;
    
    %Make Plot Info
    plot_info.create_figure = 0;
    plot_info.title         = "Positional Error:  State vs Raw GNSS (time synchronized)";
    plot_info.x_label       = "Time (s)";
    plot_info.y_label       = "Positional Error (m)";
    plot_info.legend        = [];
    plot_info.lims_x        = [];
    plot_info.lims_y        = [];
    
    %Make plot
    dist_err                = Plot_Time_History(times, input_vectors, plot_info);
    
    %Start distsance travelled plot
    subplot(3,1,2)
    
    %Capture start and stop points of GNSS
    gnss_mask               = log_data.state.filter_status.gnss_fix_type;

    %Capture distance travelled
    init_pos_vector         = log_data.state.position(1,1:2).*ones(size(log_data.state.position(:,1:2)));
    [dist_travel, time]     = distance_between_lat_lon_vectors(init_pos_vector, log_data.state.duration_seconds, log_data.raw_gnss.position(:,1:2), log_data.raw_gnss.duration_seconds);
    
    %Make input vectors
    times                   = [];
    times.time1             = time;
    
    input_vectors           = [];
    input_vectors.inp1      = dist_travel;
    
    %Make Plot Info
    plot_info.create_figure = 0;
    plot_info.title         = "Distance Travelled (Raw GNSS)";
    plot_info.x_label       = "Time (s)";
    plot_info.y_label       = "Distance (m)";
    plot_info.legend        = [];
    plot_info.lims_x        = [];
    plot_info.lims_y        = [];
    
    %Make plot
    dist_err                = Plot_Time_History(times, input_vectors, plot_info);
    
    %Start error over distance travelled plot
    subplot(3,1,3)
    
    %Make input vectors
    times                   = [];
    times.time1             = time;
    
    input_vectors           = [];
    input_vectors.inp1      = pos_error./dist_travel*100;
    
    %Make Plot Info
    plot_info.create_figure = 0;
    plot_info.title         = "Error over distance travelled";
    plot_info.x_label       = "Time (s)";
    plot_info.y_label       = "Percent (%)";
    plot_info.legend        = [];
    plot_info.lims_x        = [];
    plot_info.lims_y        = [0,15];
    
    %Make plot
    dist_err                = Plot_Time_History(times, input_vectors, plot_info);

end

